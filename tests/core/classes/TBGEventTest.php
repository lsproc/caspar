<?php

require THEBUGGENIE_CORE_PATH . 'classes/\caspar\core\Event.class.php';

class \caspar\core\Logging
{
	public function log($message, $module = '', $level = '')
	{
		
	}
}

/**
 * Test class for \caspar\core\Event.
 * Generated by PHPUnit on 2010-10-05 at 16:55:02.
 */
class \caspar\core\EventTest extends PHPUnit_Framework_TestCase
{

	/**
	 * @covers \caspar\core\Event::__construct
	 * @covers \caspar\core\Event::createNew
	 */
	public function testCreateNew()
	{
		$event = \caspar\core\Event::createNew('modulename', 'identifier', 'subject', array('param1' => 1, 'param2' => 2), array('listitem1', 'listitem2'));

		$this->assertInstanceOf('\caspar\core\Event', $event);

		return $event;
	}

	/**
	 * @covers \caspar\core\Event::getIdentifier
	 * @depends testCreateNew
	 */
	public function testGetIdentifier(\caspar\core\Event $event)
	{
		$this->assertEquals('identifier', $event->getIdentifier());
	}

	/**
	 * @covers \caspar\core\Event::getModule
	 * @depends testCreateNew
	 */
	public function testGetModule(\caspar\core\Event $event)
	{
		$this->assertEquals('modulename', $event->getModule());
	}

	/**
	 * @covers \caspar\core\Event::getSubject
	 * @depends testCreateNew
	 */
	public function testGetSubject(\caspar\core\Event $event)
	{
		$this->assertEquals('subject', $event->getSubject());
	}

	/**
	 * @covers \caspar\core\Event::getParameters
	 * @covers \caspar\core\Event::getParameter
	 * @depends testCreateNew
	 */
	public function testParameters(\caspar\core\Event $event)
	{
		$this->assertArrayHasKey('param1', $event->getParameters());
		$this->assertEquals(1, $event->getParameter('param1'));
		$this->assertArrayHasKey('param2', $event->getParameters());
		$this->assertEquals(2, $event->getParameter('param2'));
	}

	/**
	 * @covers \caspar\core\Event::getReturnList
	 * @covers \caspar\core\Event::addToReturnList
	 * @covers \caspar\core\Event::setReturnValue
	 * @covers \caspar\core\Event::getReturnValue
	 * @depends testCreateNew
	 */
	public function testReturnListAndReturnValue(\caspar\core\Event $event)
	{
		$this->assertArrayHasKey(0, $event->getReturnList());
		$this->assertContains('listitem1', $event->getReturnList());
		$this->assertArrayHasKey(1, $event->getReturnList());
		$this->assertContains('listitem2', $event->getReturnList());

		$event->addToReturnList('listitem3');
		$this->assertContains('listitem3', $event->getReturnList());

		$event->setReturnValue('fubar');
		$this->assertEquals('fubar', $event->getReturnValue());

		$event->setReturnValue(null);
		$this->assertEquals(null, $event->getReturnValue());
	}

	/**
	 * @covers \caspar\core\Event::setProcessed
	 * @covers \caspar\core\Event::isProcessed
	 * @depends testCreateNew
	 */
	public function testProcessEvent(\caspar\core\Event $event)
	{
		$event->setProcessed(true);
		$this->assertTrue($event->isProcessed());
		$event->setProcessed(false);
		$this->assertFalse($event->isProcessed());
	}

	public function listenerCallback(\caspar\core\Event $event)
	{
		$this->wastriggered = true;
		return true;
	}

	public function listenerCallbackNonProcessingFirst(\caspar\core\Event $event)
	{
		$this->wasprocessed[] = 1;
		return true;
	}

	public function listenerCallbackNonProcessingSecond(\caspar\core\Event $event)
	{
		$this->wasprocessed[] = 2;
		$event->setProcessed();
		return true;
	}

	public function listenerCallbackProcessing(\caspar\core\Event $event)
	{
		$this->wasprocessed[] = 3;
		return true;
	}

	/**
	 * @covers \caspar\core\Event::listen
	 * @covers \caspar\core\Event::isAnyoneListening
	 * @covers \caspar\core\Event::clearListeners
	 * @depends testCreateNew
	 */
	public function testListening(\caspar\core\Event $event)
	{
		\caspar\core\Event::listen('modulename', 'identifier', array($this, 'listenerCallback'));
		$this->assertTrue(\caspar\core\Event::isAnyoneListening('modulename', 'identifier'));

		\caspar\core\Event::clearListeners('modulename', 'identifier');
		$this->assertFalse(\caspar\core\Event::isAnyoneListening('modulename', 'identifier'));

		\caspar\core\Event::listen('modulename', 'identifier', array($this, 'listenerCallbackNonProcessingFirst'));
		\caspar\core\Event::listen('modulename', 'identifier', array($this, 'listenerCallbackNonProcessingSecond'));
		\caspar\core\Event::listen('modulename', 'identifier', array($this, 'listenerCallbackProcessing'));
		$this->assertTrue(\caspar\core\Event::isAnyoneListening('modulename', 'identifier'));
		
		return $event;
	}

	/**
	 * @covers \caspar\core\Event::listen
	 * @covers \caspar\core\Event::trigger
	 * @covers \caspar\core\Event::triggerUntilProcessed
	 * @depends testListening
	 */
	public function testTriggeringAndProcessing(\caspar\core\Event $event)
	{
		$this->wastriggered = false;
		\caspar\core\Event::clearListeners('modulename', 'identifier');
		\caspar\core\Event::listen('modulename', 'identifier', array($this, 'listenerCallback'));

		$event->trigger();
		$this->assertAttributeEquals(true, 'wastriggered', $this);

		\caspar\core\Event::clearListeners('modulename', 'identifier');
		\caspar\core\Event::listen('modulename', 'identifier', array($this, 'listenerCallbackNonProcessingFirst'));
		\caspar\core\Event::listen('modulename', 'identifier', array($this, 'listenerCallbackNonProcessingSecond'));
		\caspar\core\Event::listen('modulename', 'identifier', array($this, 'listenerCallbackProcessing'));

		$this->wasprocessed = array();
		$event->triggerUntilProcessed();

		$this->assertAttributeNotEmpty('wasprocessed', $this);
		$this->assertAttributeContains(1, 'wasprocessed', $this);
		$this->assertAttributeContains(2, 'wasprocessed', $this);
		$this->assertAttributeNotContains(3, 'wasprocessed', $this);
	}

}
